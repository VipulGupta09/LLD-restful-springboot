package com.questions.tree;

import java.util.ArrayList;
import java.util.List;

class TreeNode {
	TreeNode left;
	TreeNode right;
	int val;

	public TreeNode() {
	}

	public TreeNode(TreeNode left, TreeNode right, int val) {
		this.left = left;
		this.right = right;
		this.val = val;
	}
}

public class TreeTraversal {
	// Pre :Root Left Right : 1 2 4 5 3
	// Post :Left Right Root : 4 5 2 3 1
	// In :Left Root Right : 4 2 5 1 3

//			1
//		2		3
//	4		5

	static ArrayList<Integer> list = new ArrayList<Integer>();

	public static void main(String[] args) {

		TreeNode root = new TreeNode(new TreeNode(), new TreeNode(), 1);
		root.left = new TreeNode(new TreeNode(), new TreeNode(), 2);
		root.left.left = new TreeNode(null, null, 4);
		root.left.right = new TreeNode(null, null, 5);

		root.right = new TreeNode(null, null, 3);

		preOrderTraversal(root);
		System.out.println("PreOrder");
		print(list);
		list = new ArrayList<Integer>();
		postOrderTraversal(root);
		System.out.println("PostOrder");
		print(list);
		list = new ArrayList<Integer>();
		inOrderTraversal(root);
		System.out.println("InOrder");
		print(list);

	}

	public static void print(ArrayList<Integer> list) {
		for (int i : list)
			System.out.print(i + " ");
		System.out.println();

	}

	public static ArrayList<Integer> preOrderTraversal(TreeNode root) {
		if (root == null)
			return list;
		list.add(root.val);
		if (root.left != null)
			preOrderTraversal(root.left);
		if (root.right != null)
			preOrderTraversal(root.right);
		return list;
	}

	// Left Right Root
	public static ArrayList<Integer> postOrderTraversal(TreeNode root) {
		if (root == null)
			return list;
		if (root.left != null)
			postOrderTraversal(root.left);
		if (root.right != null)
			postOrderTraversal(root.right);
		list.add(root.val);

		return list;

	}

	// Left Root Right
	public static ArrayList<Integer> inOrderTraversal(TreeNode root) {
		if (root == null)
			return list;
		if (root.left != null)
			inOrderTraversal(root.left);
		list.add(root.val);
		if (root.right != null)
			inOrderTraversal(root.right);
		return list;
	}

//		1
//	   / \
//	  2   2
//	 / \ / \
//	3  4 4  3
	// Mirror image
	public static boolean isSymmetric(TreeNode lt, TreeNode rt) {
		if (lt == null || rt == null)
			return lt == rt;
		if (lt.val != rt.val)
			return false;
		return isSymmetric(lt.left, rt.right) && isSymmetric(lt.right, rt.left);
	}

	// Two Trees are same or not
	public boolean isSameTree(TreeNode p, TreeNode q) {
		if (p == null || q == null)
			return p == q;
		if (p.val != q.val)
			return false;
		return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
	}
}
