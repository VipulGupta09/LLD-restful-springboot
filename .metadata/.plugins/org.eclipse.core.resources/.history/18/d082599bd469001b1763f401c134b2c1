package com.questions.tree;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

class TreeNode {
	TreeNode left;
	TreeNode right;
	int val;

	public TreeNode() {
	}
	public TreeNode(int val) {
		this.val = val;
	}
	public TreeNode(TreeNode left, TreeNode right, int val) {
		this.left = left;
		this.right = right;
		this.val = val;
	}
}

public class TreeTraversal {
	// Pre :Root Left Right : 1 2 4 5 3
	// Post :Left Right Root : 4 5 2 3 1
	// In :Left Root Right : 4 2 5 1 3

//			1
//		2		3
//	4		5

	static ArrayList<Integer> list = new ArrayList<Integer>();

	public static void main(String[] args) {

		TreeNode root = new TreeNode(new TreeNode(), new TreeNode(), 1);
		root.left = new TreeNode(new TreeNode(), new TreeNode(), 2);
		root.left.left = new TreeNode(null, null, 4);
		root.left.right = new TreeNode(null, null, 5);

		root.right = new TreeNode(null, null, 3);

		preOrderTraversal(root);
		System.out.println("PreOrder");
		print(list);
		list = new ArrayList<Integer>();
		postOrderTraversal(root);
		System.out.println("PostOrder");
		print(list);
		list = new ArrayList<Integer>();
		inOrderTraversal(root);
		System.out.println("InOrder");
		print(list);

		System.out.println(depthOfBinaryTree(root));

	}

	public static void print(ArrayList<Integer> list) {
		for (int i : list)
			System.out.print(i + " ");
		System.out.println();

	}

	public static ArrayList<Integer> preOrderTraversal(TreeNode root) {
		if (root == null)
			return list;
		list.add(root.val);
		if (root.left != null)
			preOrderTraversal(root.left);
		if (root.right != null)
			preOrderTraversal(root.right);
		return list;
	}

	// Left Right Root
	public static ArrayList<Integer> postOrderTraversal(TreeNode root) {
		if (root == null)
			return list;
		if (root.left != null)
			postOrderTraversal(root.left);
		if (root.right != null)
			postOrderTraversal(root.right);
		list.add(root.val);

		return list;

	}

	// Left Root Right
	public static ArrayList<Integer> inOrderTraversal(TreeNode root) {
		if (root == null)
			return list;
		if (root.left != null)
			inOrderTraversal(root.left);
		list.add(root.val);
		if (root.right != null)
			inOrderTraversal(root.right);
		return list;
	}

//		1
//	   / \
//	  2   2
//	 / \ / \
//	3  4 4  3
	// Mirror image
	public static boolean isSymmetric(TreeNode lt, TreeNode rt) {
		if (lt == null || rt == null)
			return lt == rt;
		if (lt.val != rt.val)
			return false;
		return isSymmetric(lt.left, rt.right) && isSymmetric(lt.right, rt.left);
	}

	// Two Trees are same or not
	public boolean isSameTree(TreeNode p, TreeNode q) {
		if (p == null || q == null)
			return p == q;
		if (p.val != q.val)
			return false;
		return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
	}

	public static int depthOfBinaryTree(TreeNode root) {
		if (root == null)
			return 0;
		int left = depthOfBinaryTree(root.left);
		int right = depthOfBinaryTree(root.right);

		return 1 + Math.max(left, right);
	}

//		3
//	   / \
//	  9  20
//	    /  \
//	   15   7
	public List<List<Integer>> levelOrder(TreeNode root) {
		List<List<Integer>> result = new ArrayList<List<Integer>>();
		if (root == null)
			return result;
		Queue<TreeNode> queue = new LinkedList<TreeNode>();
		queue.offer(root);

		while (!queue.isEmpty()) {
			int size = queue.size();
			List<Integer> level = new ArrayList<Integer>();

			for (int i = 0; i < size; i++) {
				TreeNode tempNode = queue.poll();
				level.add(tempNode.val);
				if (tempNode.left != null)
					queue.offer(tempNode.left);
				if (tempNode.right != null)
					queue.offer(tempNode.right);
			}
			result.add(level);
		}
		return result;
	}

	public boolean isValidTree(TreeNode root, Integer min, Integer max) {
		if (root == null)
			return true;
		if ((min != null && root.val <= min) || (max != null && root.val >= max))
			return false;
		return isValidTree(root.left, min, root.val) && isValidTree(root.right, root.val, max);
	}

	// construct BST from sorted array [-10,-3,0,5,9], o/p: [0,-10,5,null,-3,null,9]
	public TreeNode constructTree(int[] nums, int start, int end) {
		if (start > end)
			return null;
		int mid = start + (end - start) / 2;

		TreeNode root = new TreeNode(nums[mid]);
		root.left = constructTree(nums, start, mid - 1);
		root.right = constructTree(nums, mid + 1, end);
		return root;
	}
//			inorder = [9,3,15,20,7] Left Root Right
// 			postorder = [9,15,7,20,3] Left Right Root
//		3
//	   / \
//	  9  20
//	    /  \
//	   15   7
	public static TreeNode constructBinaryTree(int[] inOrder, int[] postOrder,int inStart, int inEnd, int postStart, int postEnd) {
		if(inStart>inEnd)
			return null;
		int rootVal = postOrder[postEnd];
		TreeNode root = new TreeNode(rootVal);
		
		int rootIndex = 0;
		for(rootIndex =0;rootIndex<=inEnd;rootIndex++) {
			if(inOrder[rootIndex] == root.val) {
				break;
			}
		}
		int leftTreeSize = rootIndex - inStart;
		int rightTreeSize = inEnd - rootIndex;
		
		root.left = constructBinaryTree(inOrder, postOrder, inStart, rootIndex-1, postStart, postStart+leftTreeSize-1);
		root.right = constructBinaryTree(inOrder, postOrder, rootIndex +1, inEnd, postEnd - rightTreeSize, postEnd -1);
		return root;
	}
}













